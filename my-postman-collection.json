{
	"info": {
		"_postman_id": "37bd9861-3ae5-4726-b65e-cfcbcb740ff4",
		"name": "AutomationExercise API Testing",
		"schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json",
		"_exporter_id": "38004758"
	},
	"item": [
		{
			"name": "All Products List",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Status code is 200\", function () {\r",
							"    pm.response.to.have.status(200);\r",
							"});\r",
							"\r",
							"pm.test(\"Response contains products\", function () {\r",
							"    const jsonData = pm.response.json();\r",
							"    pm.expect(jsonData.products).to.be.an('array');  // Check if 'products' is an array\r",
							"    pm.expect(jsonData.products[0]).to.have.property('id');  // Check if each product has 'id' field\r",
							"    pm.expect(jsonData.products[0]).to.have.property('name'); // Check if each product has 'name' field\r",
							"});\r",
							""
						],
						"type": "text/javascript",
						"packages": {}
					}
				}
			],
			"request": {
				"method": "GET",
				"header": [],
				"url": {
					"raw": "https://automationexercise.com/api/productsList",
					"protocol": "https",
					"host": [
						"automationexercise",
						"com"
					],
					"path": [
						"api",
						"productsList"
					]
				}
			},
			"response": []
		},
		{
			"name": "To all Products List",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Status code is 200 (even though it's an error)\", function () {\r",
							"    pm.response.to.have.status(200);  // Verify the status code is 200\r",
							"});\r",
							"\r",
							"pm.test(\"Response contains error code 405\", function () {\r",
							"    const jsonData = pm.response.json();\r",
							"    pm.expect(jsonData.responseCode).to.eql(405);  // Check if responseCode in body is 405\r",
							"});\r",
							"\r",
							"pm.test(\"Correct error message\", function () {\r",
							"    const jsonData = pm.response.json();\r",
							"    pm.expect(jsonData.message).to.eql(\"This request method is not supported.\"); // Check if the message is correct\r",
							"});\r",
							""
						],
						"type": "text/javascript",
						"packages": {}
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [],
				"url": {
					"raw": "https://automationexercise.com/api/productsList",
					"protocol": "https",
					"host": [
						"automationexercise",
						"com"
					],
					"path": [
						"api",
						"productsList"
					]
				}
			},
			"response": []
		},
		{
			"name": "Get All Brands List",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"// Parse the response body\r",
							"const jsonData = pm.response.json();\r",
							"\r",
							"// Check the response code\r",
							"pm.test(\"Response code is 200\", function () {\r",
							"    pm.response.to.have.status(200);\r",
							"});\r",
							"\r",
							"// Check if the brands property is an array\r",
							"pm.test(\"Brands is an array\", function () {\r",
							"    pm.expect(jsonData.brands).to.be.an('array');\r",
							"});\r",
							"\r",
							"// Check if each brand has an id and name\r",
							"pm.test(\"Each brand has an id and name\", function () {\r",
							"    jsonData.brands.forEach(function(brand) {\r",
							"        pm.expect(brand).to.have.property('id');\r",
							"        pm.expect(brand).to.have.property('brand');\r",
							"    });\r",
							"});\r",
							""
						],
						"type": "text/javascript",
						"packages": {}
					}
				}
			],
			"request": {
				"method": "GET",
				"header": [],
				"url": {
					"raw": "https://automationexercise.com/api/brandsList",
					"protocol": "https",
					"host": [
						"automationexercise",
						"com"
					],
					"path": [
						"api",
						"brandsList"
					]
				}
			},
			"response": []
		},
		{
			"name": "To Search Product",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Status code is 200\", function () {\r",
							"    pm.response.to.have.status(200);\r",
							"});\r",
							"\r",
							"// Parse the JSON response\r",
							"const jsonData = pm.response.json();\r",
							"\r",
							"// Validate that the response contains a 'products' array\r",
							"pm.test(\"Response contains products array\", function () {\r",
							"    pm.expect(jsonData.products).to.be.an('array');\r",
							"    pm.expect(jsonData.products.length).to.be.greaterThan(0);\r",
							"});\r",
							"\r",
							"// Check if each product has an 'id', 'name', and 'price'\r",
							"pm.test(\"Each product has id, name, and price\", function () {\r",
							"    jsonData.products.forEach(function (product) {\r",
							"        pm.expect(product).to.have.property('id');\r",
							"        pm.expect(product).to.have.property('name');\r",
							"        pm.expect(product).to.have.property('price');\r",
							"    });\r",
							"});\r",
							""
						],
						"type": "text/javascript",
						"packages": {}
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [],
				"body": {
					"mode": "formdata",
					"formdata": [
						{
							"key": "search_product",
							"value": "tshirt",
							"type": "text"
						}
					]
				},
				"url": {
					"raw": "https://automationexercise.com/api/searchProduct",
					"protocol": "https",
					"host": [
						"automationexercise",
						"com"
					],
					"path": [
						"api",
						"searchProduct"
					]
				}
			},
			"response": []
		},
		{
			"name": "To Verify Login",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"// Check if status code is 200\r",
							"pm.test(\"Status code is 200\", function () {\r",
							"    pm.response.to.have.status(200);\r",
							"});\r",
							"\r",
							"// Check if response code in body is 405\r",
							"pm.test(\"Response contains '405' in responseCode\", function () {\r",
							"    const jsonData = pm.response.json();\r",
							"    pm.expect(jsonData.responseCode).to.eql(405);\r",
							"});\r",
							"\r",
							"// Check if response message is correct\r",
							"pm.test(\"Response message is correct\", function () {\r",
							"    const jsonData = pm.response.json();\r",
							"    pm.expect(jsonData.message).to.eql(\"This request method is not supported.\");\r",
							"});\r",
							""
						],
						"type": "text/javascript",
						"packages": {}
					}
				}
			],
			"request": {
				"method": "DELETE",
				"header": [],
				"url": {
					"raw": "https://automationexercise.com/api/verifyLogin",
					"protocol": "https",
					"host": [
						"automationexercise",
						"com"
					],
					"path": [
						"api",
						"verifyLogin"
					]
				}
			},
			"response": []
		},
		{
			"name": "To Create/Register User Account",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"// Test Script for Creating a User Account\r",
							"pm.test(\"User account created\", function () {\r",
							"    pm.response.to.have.status(200); \r",
							"    const responseJson = pm.response.json();\r",
							"    pm.expect(responseJson.message).to.eql(\"User created!\"); // Validate success message\r",
							"});\r",
							""
						],
						"type": "text/javascript",
						"packages": {}
					}
				},
				{
					"listen": "prerequest",
					"script": {
						"exec": [
							"\r",
							""
						],
						"type": "text/javascript",
						"packages": {}
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [],
				"body": {
					"mode": "formdata",
					"formdata": [
						{
							"key": "name",
							"value": "John Wick",
							"type": "text"
						},
						{
							"key": "email",
							"value": "johnwick@example.com",
							"type": "text"
						},
						{
							"key": "password",
							"value": "Password123",
							"type": "text"
						},
						{
							"key": "title",
							"value": "Mr",
							"type": "text"
						},
						{
							"key": "birth_date",
							"value": "01",
							"type": "text"
						},
						{
							"key": "birth_month",
							"value": "January",
							"type": "text"
						},
						{
							"key": "birth_year",
							"value": "1990",
							"type": "text"
						},
						{
							"key": "firstname",
							"value": "John",
							"type": "text"
						},
						{
							"key": "lastname",
							"value": "Wick",
							"type": "text"
						},
						{
							"key": "company",
							"value": "AK47",
							"type": "text"
						},
						{
							"key": "address1",
							"value": "123 Main St",
							"type": "text"
						},
						{
							"key": "address2",
							"value": "Apt 4B",
							"type": "text"
						},
						{
							"key": "country",
							"value": "USA",
							"type": "text"
						},
						{
							"key": "zipcode",
							"value": "12345",
							"type": "text"
						},
						{
							"key": "state",
							"value": "NY",
							"type": "text"
						},
						{
							"key": "city",
							"value": "New York",
							"type": "text"
						},
						{
							"key": "mobile_number",
							"value": "666666",
							"type": "text"
						}
					]
				},
				"url": {
					"raw": "https://automationexercise.com/api/createAccount",
					"protocol": "https",
					"host": [
						"automationexercise",
						"com"
					],
					"path": [
						"api",
						"createAccount"
					]
				}
			},
			"response": []
		},
		{
			"name": "To Delete User Account",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"// Test Script for Deleting a User Account\r",
							"pm.test(\"Delete account\", function () {\r",
							"    pm.response.to.have.status(200); \r",
							"    const responseJson = pm.response.json();\r",
							"    pm.expect(responseJson.message).to.eql(\"Account deleted!\"); // Validate success message\r",
							"});\r",
							""
						],
						"type": "text/javascript",
						"packages": {}
					}
				},
				{
					"listen": "prerequest",
					"script": {
						"exec": [
							""
						],
						"type": "text/javascript",
						"packages": {}
					}
				}
			],
			"request": {
				"method": "DELETE",
				"header": [],
				"body": {
					"mode": "formdata",
					"formdata": [
						{
							"key": "email",
							"value": "johnwick@example.com",
							"type": "text"
						},
						{
							"key": "password",
							"value": "Password123",
							"type": "text"
						}
					]
				},
				"url": {
					"raw": "https://automationexercise.com/api/deleteAccount",
					"protocol": "https",
					"host": [
						"automationexercise",
						"com"
					],
					"path": [
						"api",
						"deleteAccount"
					]
				}
			},
			"response": []
		}
	]
}